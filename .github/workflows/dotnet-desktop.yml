# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build a .NET project and create executable releases
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "master" ]

env:
  Solution_Name: CryptoTool.sln
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-release: ${{ steps.get-version.outputs.is-release }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Get version from git tag or csproj
    - name: Get Version
      id: get-version
      shell: pwsh
      run: |
        $version = ""
        $isRelease = "false"
        
        # Check if this is a tag push
        if ($env:GITHUB_REF -like "refs/tags/v*") {
          $version = $env:GITHUB_REF -replace "refs/tags/v", ""
          $isRelease = "true"
          Write-Host "Using git tag version: $version"
        } else {
          # Extract version from csproj file
          [xml]$csproj = Get-Content "CryptoTool.Win\CryptoTool.Win.csproj"
          $version = $csproj.Project.PropertyGroup.Version
          if ([string]::IsNullOrEmpty($version)) {
            $version = "1.0.0"
          }
          Write-Host "Using csproj version: $version"
        }
        
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "is-release=$isRelease" >> $env:GITHUB_OUTPUT
        echo "VERSION=$version" >> $env:GITHUB_ENV

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Install WiX toolset for MSI creation (using v4 for better compatibility)
    - name: Install WiX toolset
      shell: pwsh
      run: |
        # Install WiX v4 for better extension compatibility
        dotnet tool install --global wix --version 4.0.5
        
        # Check WiX version
        $wixVersion = wix --version
        Write-Host "Installed WiX version: $wixVersion"
        
        # Try to add UI extension
        try {
          Write-Host "Attempting to add WiX UI extension..."
          $result = wix extension add WixToolset.UI.wixext 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "WiX UI extension installed successfully"
            echo "HAS_UI_EXTENSION=true" >> $env:GITHUB_ENV
          } else {
            Write-Warning "Failed to install WiX UI extension: $result"
            echo "HAS_UI_EXTENSION=false" >> $env:GITHUB_ENV
          }
        } catch {
          Write-Warning "Could not install WiX UI extension: $($_.Exception.Message)"
          echo "HAS_UI_EXTENSION=false" >> $env:GITHUB_ENV
        }
        
        # List installed extensions
        Write-Host "Checking installed extensions..."
        try {
          $extensions = wix extension list 2>&1
          Write-Host "Installed extensions: $extensions"
        } catch {
          Write-Host "Could not list extensions"
        }

    # Update project versions if using git tag
    - name: Update All Project Versions
      if: steps.get-version.outputs.is-release == 'true'
      shell: pwsh
      run: |
        $version = "${{ env.VERSION }}".Trim()
        $assemblyVersion = "$version.0"
        $fileVersion = "$version.0"
        
        $projects = @(
          "CryptoTool.Win\CryptoTool.Win.csproj",
          "CryptoTool.App\CryptoTool.App.csproj",
          "CryptoTool.Common\CryptoTool.Common.csproj"
        )
        
        foreach ($proj in $projects) {
          Write-Host "Updating version in $proj..."
          [xml]$xml = Get-Content $proj
          
          # Find the correct PropertyGroup (usually the first one)
          $propertyGroup = $xml.Project.PropertyGroup | Select-Object -First 1
          
          $propertyGroup.Version = $version
          $propertyGroup.AssemblyVersion = $assemblyVersion
          $propertyGroup.FileVersion = $fileVersion
          
          $xml.Save($proj)
          Write-Host "  Version set to $version"
          Write-Host "  AssemblyVersion set to $assemblyVersion"
          Write-Host "  FileVersion set to $fileVersion"
        }

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    # Build the solution
    - name: Build
      run: dotnet build ${{ env.Solution_Name }} --no-restore --configuration ${{ matrix.configuration }}

    # Run tests (if any test projects exist)
    - name: Test
      run: dotnet test ${{ env.Solution_Name }} --no-build --configuration ${{ matrix.configuration }} --verbosity normal
      continue-on-error: true  # Continue even if no test projects are found

    # Create publish directory structure
    - name: Create Publish Directory
      shell: pwsh
      run: |
        New-Item -Path "./publish" -ItemType Directory -Force
        Write-Host "Created publish directory"

    # Publish the WinForms application as single file (Self-contained)
    - name: Publish WinForms App (Self-contained)
      shell: pwsh
      run: |
        dotnet publish CryptoTool.Win\CryptoTool.Win.csproj `
          --configuration ${{ matrix.configuration }} `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/CryptoTool.Win-SelfContained `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=false `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -p:DebugType=None `
          -p:DebugSymbols=false

    # Publish the WinForms application (Framework-dependent)
    - name: Publish WinForms App (Framework-dependent)
      shell: pwsh
      run: |
        dotnet publish CryptoTool.Win\CryptoTool.Win.csproj `
          --configuration ${{ matrix.configuration }} `
          --runtime win-x64 `
          --self-contained false `
          --output ./publish/CryptoTool.Win-FrameworkDependent `
          -p:PublishSingleFile=true `
          -p:DebugType=None `
          -p:DebugSymbols=false

    # Publish the Console App
    - name: Publish Console App
      shell: pwsh
      run: |
        dotnet publish CryptoTool.App\CryptoTool.App.csproj `
          --configuration ${{ matrix.configuration }} `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/CryptoTool.App `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=false `
          -p:DebugType=None `
          -p:DebugSymbols=false

    # Rename executables with version info
    - name: Rename executables
      shell: pwsh
      run: |
        $version = "${{ env.VERSION }}".Trim()
        
        if (Test-Path "./publish/CryptoTool.Win-SelfContained/CryptoTool.Win.exe") {
          Rename-Item "./publish/CryptoTool.Win-SelfContained/CryptoTool.Win.exe" "CryptoTool-v$version-win-x64-SelfContained.exe"
          Write-Host "Renamed self-contained executable"
        }
        if (Test-Path "./publish/CryptoTool.Win-FrameworkDependent/CryptoTool.Win.exe") {
          Rename-Item "./publish/CryptoTool.Win-FrameworkDependent/CryptoTool.Win.exe" "CryptoTool-v$version-win-x64-FrameworkDependent.exe"
          Write-Host "Renamed framework-dependent executable"
        }
        if (Test-Path "./publish/CryptoTool.App/CryptoTool.App.exe") {
          Rename-Item "./publish/CryptoTool.App/CryptoTool.App.exe" "CryptoTool.App-v$version-win-x64.exe"
          Write-Host "Renamed console app executable"
        }

    # Create WiX source files for MSI packaging
    - name: Create WiX Configuration
      shell: pwsh
      run: |
        $version = "${{ env.VERSION }}".Trim()
        $absolutePath = (Resolve-Path "./publish/CryptoTool.Win-SelfContained/CryptoTool-v$version-win-x64-SelfContained.exe").Path
        
        # Create installer directory in publish folder
        New-Item -Path "./publish/installer" -ItemType Directory -Force
        
        # Check if UI extension is available
        $hasUI = $env:HAS_UI_EXTENSION -eq "true"
        Write-Host "UI Extension available: $hasUI"
        
        if ($hasUI) {
          # Create WiX configuration with UI
          $wxsContent = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs"
             xmlns:ui="http://wixtoolset.org/schemas/v4/wxs/ui">
          <Package Id="CryptoToolPackage" Name="CryptoTool" Language="1033" Version="$version" Manufacturer="jinjupeng" UpgradeCode="12345678-1234-1234-1234-123456789012">
            <SummaryInformation Keywords="Installer" Description="CryptoTool Setup" Manufacturer="jinjupeng" />
            
            <MajorUpgrade DowngradeErrorMessage="A newer version of CryptoTool is already installed." />
            <MediaTemplate EmbedCab="yes" />
            
            <Feature Id="ProductFeature" Title="CryptoTool" Level="1">
              <ComponentGroupRef Id="ProductComponents" />
            </Feature>
            
            <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER" />
            <ui:WixUI Id="WixUI_InstallDir" />
            
            <StandardDirectory Id="ProgramFilesFolder">
              <Directory Id="INSTALLFOLDER" Name="CryptoTool">
                <Component Id="MainExecutable" Guid="*">
                  <File Id="CryptoToolExe" Source="$absolutePath" KeyPath="yes">
                    <Shortcut Id="ApplicationStartMenuShortcut" 
                             Directory="ProgramMenuFolder" 
                             Name="CryptoTool" 
                             Description="CryptoTool 加解密工具" 
                             WorkingDirectory="INSTALLFOLDER" 
                             Icon="CryptoTool.exe" 
                             IconIndex="0" />
                    <Shortcut Id="ApplicationDesktopShortcut" 
                             Directory="DesktopFolder" 
                             Name="CryptoTool" 
                             Description="CryptoTool 加解密工具" 
                             WorkingDirectory="INSTALLFOLDER" 
                             Icon="CryptoTool.exe" 
                             IconIndex="0" />
                  </File>
                </Component>
                
                <Component Id="ApplicationShortcuts" Guid="*">
                  <RemoveFolder Id="INSTALLFOLDER" On="uninstall" />
                  <RegistryValue Root="HKCU" 
                                Key="Software\jinjupeng\CryptoTool" 
                                Name="installed" 
                                Type="integer" 
                                Value="1" 
                                KeyPath="yes" />
                </Component>
              </Directory>
            </StandardDirectory>
            
            <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
              <ComponentRef Id="MainExecutable" />
              <ComponentRef Id="ApplicationShortcuts" />
            </ComponentGroup>
            
            <Icon Id="CryptoTool.exe" SourceFile="$absolutePath" />
          </Package>
        </Wix>
        "@
        } else {
          # Create basic WiX configuration without UI extension
          $wxsContent = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
          <Package Id="CryptoToolPackage" Name="CryptoTool" Language="1033" Version="$version" Manufacturer="jinjupeng" UpgradeCode="12345678-1234-1234-1234-123456789012">
            <SummaryInformation Keywords="Installer" Description="CryptoTool Setup" Manufacturer="jinjupeng" />
            
            <MajorUpgrade DowngradeErrorMessage="A newer version of CryptoTool is already installed." />
            <MediaTemplate EmbedCab="yes" />
            
            <Feature Id="ProductFeature" Title="CryptoTool" Level="1">
              <ComponentGroupRef Id="ProductComponents" />
            </Feature>
            
            <StandardDirectory Id="ProgramFilesFolder">
              <Directory Id="INSTALLFOLDER" Name="CryptoTool">
                <Component Id="MainExecutable" Guid="*">
                  <File Id="CryptoToolExe" Source="$absolutePath" KeyPath="yes">
                    <Shortcut Id="ApplicationStartMenuShortcut" 
                             Directory="ProgramMenuFolder" 
                             Name="CryptoTool" 
                             Description="CryptoTool 加解密工具" 
                             WorkingDirectory="INSTALLFOLDER" 
                             Icon="CryptoTool.exe" 
                             IconIndex="0" />
                    <Shortcut Id="ApplicationDesktopShortcut" 
                             Directory="DesktopFolder" 
                             Name="CryptoTool" 
                             Description="CryptoTool 加解密工具" 
                             WorkingDirectory="INSTALLFOLDER" 
                             Icon="CryptoTool.exe" 
                             IconIndex="0" />
                  </File>
                </Component>
                
                <Component Id="ApplicationShortcuts" Guid="*">
                  <RemoveFolder Id="INSTALLFOLDER" On="uninstall" />
                  <RegistryValue Root="HKCU" 
                                Key="Software\jinjupeng\CryptoTool" 
                                Name="installed" 
                                Type="integer" 
                                Value="1" 
                                KeyPath="yes" />
                </Component>
              </Directory>
            </StandardDirectory>
            
            <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
              <ComponentRef Id="MainExecutable" />
              <ComponentRef Id="ApplicationShortcuts" />
            </ComponentGroup>
            
            <Icon Id="CryptoTool.exe" SourceFile="$absolutePath" />
          </Package>
        </Wix>
        "@
        }
        
        $wxsContent | Out-File -FilePath "./publish/installer/CryptoTool.wxs" -Encoding UTF8
        Write-Host "Created WiX configuration file in publish directory (UI: $hasUI)"

    # Build MSI package
    - name: Build MSI Package
      shell: pwsh
      run: |
        $version = "${{ env.VERSION }}".Trim()
        $msiPath = "./publish/CryptoTool-v$version-win-x64-Setup.msi"
        $hasUI = $env:HAS_UI_EXTENSION -eq "true"
        
        try {
          if ($hasUI) {
            Write-Host "Building MSI with UI extension..."
            wix build ./publish/installer/CryptoTool.wxs -o $msiPath -ext WixToolset.UI.wixext
          } else {
            Write-Host "Building basic MSI without UI extension..."
            wix build ./publish/installer/CryptoTool.wxs -o $msiPath
          }
          
          if (Test-Path $msiPath) {
            Write-Host "MSI package created successfully: $msiPath"
            $fileSize = [math]::Round((Get-Item $msiPath).Length / 1MB, 2)
            Write-Host "MSI package size: $fileSize MB"
          } else {
            Write-Warning "MSI package was not created"
          }
        } catch {
          Write-Warning "Failed to create MSI package: $($_.Exception.Message)"
        }
      continue-on-error: true

    # Create ZIP packages for distribution in publish directory
    - name: Create ZIP packages
      shell: pwsh
      run: |
        $version = "${{ env.VERSION }}".Trim()
        
        # Create ZIP for self-contained WinForms app
        if (Test-Path "./publish/CryptoTool.Win-SelfContained") {
          $zipPath = "./publish/CryptoTool-v$version-SelfContained-${{ matrix.configuration }}.zip"
          Compress-Archive -Path "./publish/CryptoTool.Win-SelfContained/*" -DestinationPath $zipPath
          Write-Host "Created: $zipPath"
        }
        
        # Create ZIP for framework-dependent WinForms app
        if (Test-Path "./publish/CryptoTool.Win-FrameworkDependent") {
          $zipPath = "./publish/CryptoTool-v$version-FrameworkDependent-${{ matrix.configuration }}.zip"
          Compress-Archive -Path "./publish/CryptoTool.Win-FrameworkDependent/*" -DestinationPath $zipPath
          Write-Host "Created: $zipPath"
        }
        
        # Create ZIP for console app
        if (Test-Path "./publish/CryptoTool.App") {
          $zipPath = "./publish/CryptoTool.App-v$version-${{ matrix.configuration }}.zip"
          Compress-Archive -Path "./publish/CryptoTool.App/*" -DestinationPath $zipPath
          Write-Host "Created: $zipPath"
        }

    # List all files in publish directory
    - name: List Publish Directory Contents
      shell: pwsh
      run: |
        Write-Host "Contents of publish directory:"
        Get-ChildItem "./publish" -Recurse | ForEach-Object {
          $relativePath = $_.FullName.Substring((Get-Item "./publish").FullName.Length + 1)
          if ($_.PSIsContainer) {
            Write-Host "  [DIR]  $relativePath" -ForegroundColor Yellow
          } else {
            $size = [math]::Round($_.Length / 1KB, 1)
            Write-Host "  [FILE] $relativePath ($size KB)" -ForegroundColor White
          }
        }

    # Upload entire publish directory as artifacts
    - name: Upload Complete Publish Directory
      uses: actions/upload-artifact@v4
      with:
        name: CryptoTool-Complete-${{ matrix.configuration }}-v${{ env.VERSION }}
        path: ./publish/
      if: always()

  # Create release if this is a tag push
  create-release:
    needs: build
    runs-on: windows-latest
    if: needs.build.outputs.is-release == 'true' && needs.build.result == 'success'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download artifacts (Release only)
      uses: actions/download-artifact@v4
      with:
        name: CryptoTool-Complete-Release-v${{ needs.build.outputs.version }}
        path: ./publish
        
    - name: Organize Release Files
      shell: pwsh
      run: |
        $version = "${{ needs.build.outputs.version }}".Trim()
        
        # Create release directory
        New-Item -Path "release" -ItemType Directory -Force
        
        # Move files from publish directory to release directory
        Get-ChildItem -Path "./publish" -Filter "*.exe" -Recurse | ForEach-Object {
          $destPath = "release/$($_.Name)"
          Copy-Item $_.FullName $destPath
          Write-Host "Copied: $($_.Name)"
        }
        
        Get-ChildItem -Path "./publish" -Filter "*.msi" -Recurse | ForEach-Object {
          $destPath = "release/$($_.Name)"
          Copy-Item $_.FullName $destPath
          Write-Host "Copied: $($_.Name)"
        }
        
        Get-ChildItem -Path "./publish" -Filter "*.zip" -Recurse | ForEach-Object {
          $destPath = "release/$($_.Name)"
          Copy-Item $_.FullName $destPath
          Write-Host "Copied: $($_.Name)"
        }
        
        Write-Host "Release files organized:"
        Get-ChildItem "release/" | ForEach-Object { 
          $size = [math]::Round($_.Length / 1MB, 2)
          Write-Host "  $($_.Name) ($size MB)" 
        }
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        generate_release_notes: true
        name: "CryptoTool v${{ needs.build.outputs.version }}"
        tag_name: "v${{ needs.build.outputs.version }}"
        body: |
          ## CryptoTool v${{ needs.build.outputs.version }}
          
          ### 下载说明 / Download Instructions
          
          - **CryptoTool-v${{ needs.build.outputs.version }}-win-x64-SelfContained.exe**: 自包含可执行文件，无需安装.NET运行时
          - **CryptoTool-v${{ needs.build.outputs.version }}-win-x64-FrameworkDependent.exe**: 框架依赖可执行文件，需要.NET 8运行时
          - **CryptoTool-v${{ needs.build.outputs.version }}-win-x64-Setup.msi**: Windows安装包，包含桌面和开始菜单快捷方式
          - **CryptoTool.App-v${{ needs.build.outputs.version }}-win-x64.exe**: 控制台应用程序
          - **ZIP文件**: 包含完整发布文件的压缩包
          
          ### 功能特性 / Features
          - 支持RSA、SM2、SM3、SM4等多种加解密算法
          - 提供Windows Forms图形界面和控制台应用
          - 支持密钥格式转换和证书管理
          
          ### 系统要求 / System Requirements
          - Windows 10/11 (x64)
          - .NET 8.0 Runtime (仅框架依赖版本需要)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
